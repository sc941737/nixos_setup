#!/run/current-system/sw/bin/bash
set_defaults() {
    [ -z "$BT_MENU_CMD" ] && BT_MENU_CMD="dmenu -i -l 30" 
    [ -z $BT_POWER_AUTO_DISABLE ] && BT_SCAN_AUTO_OFF_DELAY=0
    [ -z $BT_SCAN_AUTO_DISABLE ] && BT_SCAN_AUTO_OFF_DELAY=300
    [ -z $BT_PAIRABLE_AUTO_DISABLE ] && BT_PAIRABLE_AUTO_OFF_DELAY=300
    [ -z $BT_DISCOVERABLE_AUTO_DISABLE ] && BT_VISIBLE_AUTO_OFF_DELAY=300
}

divider="[[[[[[[[[[[[[[[ DEVICES ]]]]]]]]]]]]]]]"
loading="[[[[[[[[[[[[[[[ LOADING ]]]]]]]]]]]]]]]"
default_prompt="Bluetooth Manager:"

ui_toggles=( \
    "Bluetooth" \
    "Scanning" \
    "Pairing" \
    "Visibility" \
)

api_toggles=( \
    "Powered" \
    "Discovering" \
    "Pairable" \
    "Discoverable" \
)

api_commands=( \
    "power" \
    "scan" \
    "pairable" \
    "discoverable" \
)

check_is_on() {
    bluetoothctl show | grep -F -q "$1: yes"
    return $?
}

describe() {
    local index=$(($1 - 1))
    local display_name=${ui_toggles[$index]}
    local api_name=${api_toggles[$index]}
    check_is_on "$api_name" && 
	echo "$display_name is on (switch off)" || 
	echo "$display_name is off (switch on)"
}

auto_disable() {
    local cmd=$1
    local delay_pointer="BT_${cmd^^}_AUTO_DISABLE"
    local delay=${!delay_pointer}
    [[ $delay -eq 0 ]] && exit 0
    sleep $delay
    bluetoothctl $cmd off
}

switch_toggle() {
    local index=$(($1 - 1))
    local cmd="${api_commands[$index]}"
    local new_state
    check_is_on "${api_toggles[$index]}" && 
	new_state=off ||
	new_state=on
    handle_scan_off $cmd $new_state
    bluetoothctl $cmd $new_state & disown
    sleep 1
    [ $new_state = "on" ] && auto_disable $cmd &
    [ $new_state = "on" ] && main_menu
}

handle_scan_off() {
    if [ $1 = "scan" ] && [ $2 = "off" ]; then
	device_options=()
	kill $(pgrep -f "bluetoothctl scan on")
	exit
    else 
        refresh_menu 5 &
    fi
}

refresh_menu() {
    local delay=$1
    local menu_cmd=${BT_MENU_CMD%% *}
    pkill $menu_cmd
    sleep $delay
    main_menu
}

device_toggles=( \
    "Connected" \
    "Paired" \
    "Trusted"
)

describe_dev() {
    local index=$(($2 - 1))
    local toggle="${device_toggles[$index]}"
    local status="$(echo $(bluetoothctl info $1 | grep $toggle))" # Extra echo removes leading whitespace
    echo "$status (toggle)"
}

execute_dev() {
    local selected_option="${2%%)*}"
    local index=$(($selected_option - 1))
    local toggle="${device_toggles[$index]}"
    local status="$(echo $(bluetoothctl info $1 | grep $toggle))"
    case $status in
	"Connected: yes")
	    bluetoothctl disconnect $1
	    ;;
	"Connected: no")
	    bluetoothctl trust $1
	    bluetoothctl pair $1
	    bluetoothctl connect $1
	    ;;
	"Paired: yes") 
	    bluetoothctl unpair $1
	    bluetoothctl distrust $1
	    ;;
	"Paired: no") 
	    bluetoothctl trust $1
	    bluetoothctl pair $1
	    ;;
	"Trusted: yes")
	    bluetoothctl distrust $1
	    ;;
	"Trusted: no")
	    bluetoothctl trust $1
	    ;;
	*) exit ;;
    esac
}

device_menu() {
    local input="$(echo $1 | sed 's/ <<<CONNECTED>>>//')"
    local device_info="${input#* }"
    local device_mac="$(echo "${device_info##*(}" | tr -d ')')"
    local device_name="${device_info% *}"
    
    local toggles_count=${#device_toggles[@]}
    local options=()
    for i in $(seq 1 $toggles_count); do
        local option="${i}) $(describe_dev "$device_mac" ${i})"
	options=("${options[@]}" "$option")
    done
    back_index=$((toggles_count + 1))
    options=("${options[@]}" "$back_index) Back")
    exit_index=$((toggles_count + 2))
    options=("${options[@]}" "$exit_index) Exit")

    local selected_option=$(printf "%s\n" "${options[@]}" | ${BT_MENU_CMD[@]} -p "$device_name")
    local selected_index="${selected_option%%)*}"
    [ $selected_index = $back_index ] && main_menu && return
    [ $selected_index = $exit_index ] && exit

    execute_dev "$device_mac" "$selected_option"
    echo $device_mac
}

execute() {
    local selected_option="$1"
    local text="${selected_option#* }"
    local index=${selected_option%%)*} 
    local toggles_count=${#api_toggles[@]}
    local exit_index=$((toggles_count + 1)) # +1 for Exit
    case 1 in
	$((index <= toggles_count))) switch_toggle $index ;;
	$((index == exit_index))) exit 0 ;;
	$((index > toggles_count))) device_menu "$selected_option" ;;
    esac
}

connected_devices=()
fetch_connected_devices() {
    readarray -t <<< "$(bluetoothctl info | grep -F Device | awk '{print $2}')"
    connected_devices=("${MAPFILE[@]}")
}

device_options=()
fetch_device_options() {
    check_is_on "Discovering" || return
    readarray -t <<< "$(bluetoothctl devices | grep -F Device)"
    local devices=("${MAPFILE[@]}")
    local device_count=${#devices[@]}
    local increment=$((${#api_toggles[@]} + 1)) # +1 for the exit option
    local devices_prefixed
    for ((i=0; i<$device_count; i++)); do 
	local index=$((i + increment + 1)) # +1 because index
	local device_prefixed="${devices[$i]}"
	local device_info="${device_prefixed#* }"
        local device_mac="${device_info%% *}"
        local device_name="${device_info#* }"
        local device="$device_name ($device_mac)"
	[[ " ${connected_devices[*]} " == *" $device_mac "* ]] &&
	    device="$device <<<CONNECTED>>>"
	devices_prefixed+=("$index) $device")
    done
    [ $device_count = 0 ] && 
        device_options=("$loading") ||
        device_options=("$divider" "${devices_prefixed[@]}")
}

powered_off_options=( \
    "1) Bluetooth is off (switch on)" \
    "2) Exit" \
)
powered_off_menu() {
    local selected_option=$(printf "%s\n" "${powered_off_options[@]}" | ${BT_MENU_CMD[@]} -p "$default_prompt")
    local selected_index=${selected_option%%)*)} 
    case "$selected_index" in
	1) switch_toggle 1 && main_menu ;;
	2) exit ;;
	*) exit ;;
    esac
}

main_menu() {
    check_is_on "Powered" || powered_off_menu

    fetch_connected_devices
    fetch_device_options

    local toggles_count=${#ui_toggles[@]}
    local options=()
    for i in $(seq 1 $toggles_count); do
        local option="${i}) $(describe ${i})"
	options=("${options[@]}" "$option")
    done
    options=("${options[@]}" "$((toggles_count + 1))) Exit")
    options=("${options[@]}" "${device_options[@]}")

    local selected_option=$(printf "%s\n" "${options[@]}" | ${BT_MENU_CMD[@]} -p "$default_prompt")
    while [ "$selected_option" == "$loading" ] || [ "$selected_option" == "$divider" ]; do
	selected_option=$(printf "%s\n" "${options[@]}" | ${BT_MENU_CMD[@]} -p "$default_prompt")
    done
    [ -z "$selected_option" ] && exit 0

    execute "$selected_option"
}

set_defaults

main_menu
